% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R
\docType{class}
\name{components-class}
\alias{components-class}
\alias{components}
\alias{componentTable,components-method}
\alias{componentTable}
\alias{componentInfo,components-method}
\alias{componentInfo}
\alias{algorithm,components-method}
\alias{groupNames,components-method}
\alias{length,components-method}
\alias{names,components-method}
\alias{show,components-method}
\alias{[,components,ANY,ANY,missing-method}
\alias{[[,components,ANY,ANY-method}
\alias{$,components-method}
\alias{findFGroup,components-method}
\alias{findFGroup}
\alias{filterBy,components-method}
\alias{plotSpec,components-method}
\alias{plotEIC,components-method}
\alias{consensus,components-method}
\title{Component class}
\usage{
\S4method{componentTable}{components}(obj)

\S4method{componentInfo}{components}(obj)

\S4method{algorithm}{components}(obj)

\S4method{groupNames}{components}(obj)

\S4method{length}{components}(x)

\S4method{names}{components}(x)

\S4method{show}{components}(object)

\S4method{[}{components,ANY,ANY,missing}(x, i, j, ..., drop = TRUE)

\S4method{[[}{components,ANY,ANY}(x, i, j)

\S4method{$}{components}(x, name)

\S4method{findFGroup}{components}(obj, fGroup)

\S4method{filterBy}{components}(obj, fGroups, negate, index = NULL)

\S4method{plotSpec}{components}(obj, index, markFGroup = NULL,
  useGGPlot2 = FALSE, ...)

\S4method{plotEIC}{components}(obj, index, fGroups, rtWindow = 5, ...)

\S4method{consensus}{components}(obj, ...)
}
\arguments{
\item{obj, object, x}{The \code{component} object.}

\item{i, j}{A numeric or character value which is used to select components/feature groups by
their index or name, respectively (for the order/names see \code{names()/groupNames()}).\cr\cr For \code{[}: Can also be logical to perform logical selection
(similar to regular vectors). If missing all components/feature groups are selected.\cr\cr For \code{[[}: should be a skalar value. \code{j} is optional.}

\item{\dots}{For \code{plotEIC}: Further (optional) arguments passed to the
\code{plotEIC} method for the \code{\link{featureGroups}} class. Note that
the \code{colourBy}, \code{showPeakArea}, \code{showFGroupRect} and
\code{topMost} arguments cannot be set as these are set by this method. For
\code{consensus}: \code{components} objects that should be used to generate
the consensus.}

\item{drop}{ignored.}

\item{name}{The component name (partially matched).}

\item{fGroup}{The name (thus a character) of the feature group that should be
searched for.}

\item{fGroups}{The \code{\link{featureGroups}} object that was used to
generate the components.}

\item{negate}{If set to \code{TRUE} then the filter is applied in opposite
manner.}

\item{index}{The index of the component. Can be a numeric index or a
character with its name.}

\item{markFGroup}{If specified (\emph{i.e.} not \code{NULL}) this argument
can be used to mark a feature group in the plotted spectrum. The value
should be a character with the name of the feature group. Setting this to
\code{NULL} will not mark any peak.}

\item{useGGPlot2}{If \code{TRUE} then \pkg{\link{ggplot2}} is used for
plotting, otherwise base plot used. For \code{plotSpec}, \code{ggplot2}
allows nicely repelled text for annotation. However, base plot is generally
faster.}

\item{rtWindow}{Retention window: see the \code{plotEIC} method for the
\code{\link{featureGroups}} class.}
}
\value{
The subset operator (\code{"["}) and \code{filter} method
  return the data subset in an object from the \code{componentsReduced}
  class. This object does not contain any algorithm specific data and as
  such, algorithm specific methods (\emph{e.g.} \code{treeCut}) will not work
  on this object. The reason for this is that it is often very difficult or
  impossible to subset the algorithmic data.

\code{filterBy} returns a filtered \code{\link{featureGroups}}
  object.

\code{consensus} returns a \code{components} object that is produced
  by merging multiple specified \code{components} objects.
}
\description{
Contains data for feature groups that are related in some way. These
\emph{components} commonly include adducts, isotopes and homologues.
}
\details{
\code{components} objects are obtained from
\link[=component-generation]{component generators}.
}
\section{Methods (by generic)}{
\itemize{
\item \code{componentTable}: Accessor method for the \code{components} slot of a
\code{components} class. Each component is stored as a
\code{\link{data.table}}.

\item \code{componentInfo}: Accessor method for the \code{componentInfo} slot of a
\code{components} class.

\item \code{algorithm}: Retrieve the algorithm (a character string) used to
generate components.

\item \code{groupNames}: returns a \code{character} vector with the names of the
feature groups from which data is present in this object.

\item \code{length}: Obtain total number of components.

\item \code{names}: Obtain the names of all components.

\item \code{show}: Show summary information for this object.

\item \code{[}: Subset on components/feature groups.

\item \code{[[}: Extracts a component table, optionally filtered by a feature group.

\item \code{$}: Extracts a component table by component name.

\item \code{findFGroup}: Returns the component id(s) to which a feature group
belongs.

\item \code{filterBy}: Only keep feature groups in a given
\code{\link{featureGroups}} object that are also present in the specified
\code{components} object.

\item \code{plotSpec}: Plot a \emph{pseudo} mass spectrum for a single
component.

\item \code{plotEIC}: Plot an extracted ion chromatogram (EIC) for all
feature groups within a single component.

\item \code{consensus}: Generates a consensus from multiple \code{components}
objects. At this point results are simply combined and no attempt is made to
merge similar components.
}}

\section{Slots}{

\describe{
\item{\code{components}}{List of all components in this object. Use the
\code{componentTable} method for access.}

\item{\code{componentInfo}}{A \code{\link{data.table}} containing general information
for each component. Use the \code{componentInfo} method for access.}

\item{\code{algorithm}}{The algorithm that was used to generate the components. Use
the \code{algorithm} method for access.}
}}

\seealso{
\link{component-generation} and \code{\link{componentsIntClust}}
}
